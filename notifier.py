import os
import requests
from typing import Optional
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN: Optional[str] = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID: Optional[str] = os.getenv("TELEGRAM_CHAT_ID")

def validate_telegram_credentials() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram"""
    if not BOT_TOKEN or not BOT_TOKEN.startswith('bot'):
        print("‚ùå Invalid Telegram Bot Token. Must start with 'bot'")
        return False
    
    if not CHAT_ID or not CHAT_ID.strip().isdigit():
        print("‚ùå Invalid Chat ID. Must be a numeric value")
        return False
    
    return True

def send_message(text: str, max_retries: int = 3) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
    :return: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not validate_telegram_credentials():
        return False

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": int(CHAT_ID),
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }

    for attempt in range(max_retries):
        try:
            response = requests.post(
                url,
                json=payload,
                timeout=10,
                headers={"User-Agent": "AI Video Server"}
            )
            response.raise_for_status()
            data = response.json()

            if not data.get("ok"):
                error_msg = data.get("description", "Unknown error")
                print(f"‚ùå Telegram API error (attempt {attempt + 1}): {error_msg}")
                if "retry_after" in data:
                    time.sleep(data["retry_after"])
                continue

            return True

        except requests.exceptions.RequestException as e:
            print(f"‚ùå Network error (attempt {attempt + 1}): {str(e)}")
            if attempt < max_retries - 1:
                time.sleep(2 ** attempt)  # Exponential backoff

        except Exception as e:
            print(f"‚ùå Unexpected error (attempt {attempt + 1}): {str(e)}")
            break

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –ª–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
    last_error = {
        "timestamp": datetime.now().isoformat(),
        "bot_token": BOT_TOKEN[:4] + "..." + BOT_TOKEN[-4:] if BOT_TOKEN else None,
        "chat_id": CHAT_ID,
        "error": str(e),
        "message": text[:100] + "..." if len(text) > 100 else text
    }
    print(f"üî¥ Failed to send message after {max_retries} attempts. Details: {last_error}")
    return False

def send_message_with_logging(text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    success = send_message(text)
    if success:
        print(f"‚úÖ Message sent to Telegram at {datetime.now()}")
    return success

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
if __name__ == "__main__":
    test_message = "üî¥ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞\n" \
                   f"–í—Ä–µ–º—è: {datetime.now()}\n" \
                   "–≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"
    
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã")
        test_result = send_message(test_message)
    else:
        test_result = send_message_with_logging(test_message)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {'–£—Å–ø–µ—à–Ω–æ' if test_result else '–û—à–∏–±–∫–∞'}")
