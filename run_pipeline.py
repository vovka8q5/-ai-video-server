#!/usr/bin/env python3
# run_pipeline.py
import os
import sys
import logging
from datetime import datetime, timezone
from notifier import send_message
from download_video import download_from_youtube
from preprocess_video import convert_to_shorts_format
from stylize_video import apply_ai_style
from subtitle_generator import generate_subtitles
from upload_youtube import upload_to_youtube

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('pipeline.log')
    ]
)
logger = logging.getLogger(__name__)

def log_step(step: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º—Å—Ç–∞–º–ø–æ–º"""
    timestamp = datetime.now(timezone.utc).strftime('%H:%M:%S')
    logger.info(f"üîÑ [{timestamp}] {step}")
    send_message(f"üîÑ {step}")

def run_pipeline():
    try:
        # 0. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        log_step("–ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞")
        video_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
        
        # 1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        log_step("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ")
        raw_path = download_from_youtube(video_url)
        logger.info(f"–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {raw_path}")

        # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Shorts
        log_step("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Shorts")
        shorts_path = convert_to_shorts_format(raw_path)
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {shorts_path}")

        # 3. –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        log_step("–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ")
        styled_path = apply_ai_style(shorts_path)
        logger.info(f"–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {styled_path}")

        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        log_step("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
        srt_path = generate_subtitles(styled_path)
        logger.info(f"–°—É–±—Ç–∏—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: {srt_path}")

        # 5. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube
        log_step("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ YouTube")
        video_id = upload_to_youtube(styled_path)
        logger.info(f"–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, ID: {video_id}")

        # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        log_step("–ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        send_message(f"‚úÖ –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: https://youtu.be/{video_id}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {str(e)}", exc_info=True)
        send_message(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = [
        'TELEGRAM_BOT_TOKEN',
        'TELEGRAM_CHAT_ID',
        'YOUTUBE_API_KEY',
        'OPENAI_API_KEY'
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
    success = run_pipeline()
    sys.exit(0 if success else 1)
